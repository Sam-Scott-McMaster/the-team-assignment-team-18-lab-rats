#!/bin/bash
# remove: allows the user to remove a specified card/range of cards from a deck. 
# the user is shown the card list in a deck and inputs the card/range to be removed.
# Owen Johnson, McMaster University, 2024

COURSE_DIR="WANKI/$1"
card_count=$(wc -l "${COURSE_DIR}"/flashcards.txt)
card_count=$(echo "$card_count" | grep -Po ^[0-9]+)

# Prints card list
echo '-=-=-=-=- CARD LIST -=-=-=-=-'
cat -n "$COURSE_DIR"/flashcards.txt | sort
echo ''

#Prompts for input
echo 'Select the card number/1st card in range you would like to delete: '
read -r deletionNum 
echo "Select the end of the range you would like to delete (leave blank if you just want to delete $deletionNum): "
read -r deletionNumEnd
echo ''

# Error check for invalid range
if ! [[ $deletionNumEnd == "" ]]
then
    if [[ $deletionNumEnd -le $deletionNum ]]
    then
        echo "$deletionNumEnd is an invalid input. Range must go from a lower card number to a higher one."
        exit 0
    fi
fi

# Error check for invalid input (e.g. looking for card 25 in a 20 card deck).
for num in $deletionNum $deletionNumEnd
do
    if ! [[ $num =~ ^[0-9]+$ && $num -le $card_count ]]
    then
        echo "$num is an invalid input. Please enter a number associated with a card."
        exit 0
    fi
done

# Prints the cards to show user what will be deleted 
if ! [[ $deletionNumEnd == "" ]]
then
    for i in $(seq "$deletionNum" "$deletionNumEnd");
    do  
        cat -n "$COURSE_DIR"/flashcards.txt | sort | head -"$i" | tail -1
    done
else    
    cat -n "$COURSE_DIR"/flashcards.txt | sort | head -"$deletionNum" | tail -1
fi

# Prompts user to finalize decision 
echo ''
echo 'Are you sure you would like to delete this selection? (y/n)'
while read -r confirmation
do

    if [[ $confirmation == "y" || $confirmation == "Y" ]] # Deletes selection
    then

        if ! [[ $deletionNumEnd == "" ]]
        then
            for i in $(seq "$deletionNum" "$deletionNumEnd");
            do  
                CHECK=$(cat "$COURSE_DIR"/flashcards.txt | head -$deletionNum | tail -1)

                x=$(cat "$COURSE_DIR"/flashcards.txt) 
                echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/flashcards.txt

                x=$(cat "$COURSE_DIR"/easy_flashcards.txt) 
                echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/easy_flashcards.txt

                x=$(cat "$COURSE_DIR"/good_flashcards.txt) 
                echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/good_flashcards.txt

                x=$(cat "$COURSE_DIR"/hard_flashcards.txt) 
                echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/hard_flashcards.txt

                x=$(cat "$COURSE_DIR"/again_flashcards.txt) 
                echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/again_flashcards.txt
            done
        else    
            CHECK=$(cat "$COURSE_DIR"/flashcards.txt | head -$deletionNum | tail -1)

            x=$(cat "$COURSE_DIR"/flashcards.txt) 
            echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/flashcards.txt

            x=$(cat "$COURSE_DIR"/easy_flashcards.txt) 
            echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/easy_flashcards.txt

            x=$(cat "$COURSE_DIR"/good_flashcards.txt) 
            echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/good_flashcards.txt

            x=$(cat "$COURSE_DIR"/hard_flashcards.txt) 
            echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/hard_flashcards.txt

            x=$(cat "$COURSE_DIR"/again_flashcards.txt) 
            echo "$x" | grep -v "$CHECK" > "$COURSE_DIR"/again_flashcards.txt
        fi
        break

    elif [[ $confirmation == "n" || $confirmation == "N" ]] # Breaks and tells user action was cancelled.
    then
        echo "The card remains in the deck." 
        break
    
    else # prompts to try again and loops back to y/n input
        echo "Invalid input. Try again."
    fi
    echo 'Are you sure you would like to delete this card? (y/n)'
done

# Prints the updated deck
echo
echo
echo '-=-=-=-=- UPDATED CARD LIST -=-=-=-=-'
cat -n "$COURSE_DIR"/flashcards.txt | sort
echo ''