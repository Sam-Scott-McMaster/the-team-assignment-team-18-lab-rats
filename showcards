#!/bin/bash


card_difficulty() {
    WEIGHT=$((1 + $RANDOM % 100))

    #echo "WEIGHT: $WEIGHT"

    #echo $WEIGHT > trace.txt

    # 5% chance of showing 'easy' next card
    if [[ WEIGHT -gt 0 && WEIGHT -le 5 ]]
    then
        DIFFICULTY=easy

    # 10% chance of showing 'good' next card
    elif [[ WEIGHT -gt 5 && WEIGHT -le 15 ]]
    then
        DIFFICULTY=good

    # 35% chance of showing 'good' next card
    elif [[ WEIGHT -gt 15 && WEIGHT -le 50 ]]
    then
        DIFFICULTY=hard

    # 50% chance of showing 'good' next card
    else
        DIFFICULTY=again
    fi

    echo $DIFFICULTY
}

# Do not allow user to begin the testing process with no cards in the deck
if ! [[ -s ${1}/flashcards.txt ]]
then
    echo
    echo "This course does not have any cards in it. Please enter cards."
    exit 0
fi

# Begin with a question
STATE=question
CARD_TEXT=""


# Extract deck name from file name 
DECK_NAME=$(echo ${1} | grep -Po /.+ | grep -Po [^/]+)
echo 
echo "Hit Enter to begin your $DECK_NAME deck!"

# Main loop
while read line
do

    # End testing mode when 'q' or EOF
    if [[ "$line" == EOF || "$line" == "q" ]]
    then
        exit 0
    fi
    
    # Transition between "question", "answer", and "select difficulty" states

    if [[ $STATE == "question" ]]
    then

        # Random generate a card difficulty using the weighting scheme in card_difficulty()
        # if no card exists within that difficulty category, select another card
        while [[ $CARD_TEXT == "" ]]
        do
            CARD_TYPE=$(card_difficulty)
            #echo $CARD_TYPE

          # Get a random card from the random card category
            cat "${1}/${CARD_TYPE}_flashcards.txt" | sort -R | head -1 > card.txt
            CARD_TEXT=$(cat card.txt)
            #echo "${1}/${CARD_TYPE}_flashcards.txt"
            #cat card.txt

        done


        # Extract information from the card
        QUESTION=$(cat card.txt | grep -P -o "[^\|]*\|" | grep -Po "[^|]+")
        ANSWER=$(cat card.txt | grep -Po "\|.+" | grep -Po "[^\|]+")

        # Change to answering state
        echo "------------------------"
        echo $CARD_TYPE
        echo -n "Frontside: " $QUESTION
        STATE=answer
    

    elif [[ $STATE == "answer" ]]
    then
        if [[ $line == "" ]]  # only receive enter character to show backside
        then
            # Show backside and prompt for difficulty rating before changing state
            echo "Backside: " $ANSWER
            echo "------------------------"

            # Change states to difficulty selection state and display 
            STATE=selectDifficulty
            echo
            echo "Difficulty ('e': easy, 'g': good, 'h': hard, 'a': again): "
        else
            echo "Please only hit enter to see the answer"
        fi

    elif [[ $STATE == "selectDifficulty" ]]
    then
        # Make sure user specifies an accepted difficulty rating ('e' = easy, 'g' = good, 'h' = hard, 'a' = again)
        if [[ $line =~ ^[eEgGhHaA]$ ]]
        then
            # Set state to question for the next iteration
            STATE=question

            # EDGE CASE WHERE JUST ONE LINE REMAINS
            if [[ $(wc -l < ${1}/${CARD_TYPE}_flashcards.txt) == 1 ]]
            then 
                grep -vxF "${CARD_TEXT}" < ${1}/${CARD_TYPE}_flashcards.txt > temp && mv temp ${1}/${CARD_TYPE}_flashcards.txt
                > ${1}/${CARD_TYPE}_flashcards.txt
            
            else
                # Remove the card from its existing flashcard category file
                grep -vxF "${CARD_TEXT}" < ${1}/${CARD_TYPE}_flashcards.txt > temp && mv temp ${1}/${CARD_TYPE}_flashcards.txt         
            fi

            

            # Append the card content to the end of the file corresponding to its new difficulty as specified by the user
            if [[ $line =~ [eE] ]]
            then
                echo $CARD_TEXT >> ${1}/easy_flashcards.txt
                
            elif [[ $line =~ [gG] ]]
            then
                echo $CARD_TEXT >> ${1}/good_flashcards.txt

            elif [[ $line =~ [hH] ]]
            then

                echo $CARD_TEXT >> ${1}/hard_flashcards.txt                

            else
                echo $CARD_TEXT >> ${1}/again_flashcards.txt 
            fi

            # Before continuing to the next flash card
            echo "Hit Enter to continue or enter 'q' to return to courses"
            CARD_TEXT=""
        else
            echo "Please enter one of the listed options"        
        fi
    fi

done

# Clean up intermediate file used to show card content
rm card.txt



